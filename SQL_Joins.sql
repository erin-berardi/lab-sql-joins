USE sakila;

-- 1. List the number of films per category.
SELECT name as category_name, count(*) as num_films
FROM category
JOIN film_category USING (category_id)
GROUP BY name
ORDER BY num_films desc;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT  s.store_id, c.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id;



-- 3. Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(payment.amount) AS 'Total Revenue'
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

-- ALTERNATE
SELECT SUM(p.amount) AS 'total_revenue', c.store_id
FROM sakila.payment p
JOIN sakila.customer c
USING(customer_id)
GROUP BY c.store_id;



-- 4. Determine the average running time of films for each category.
SELECT category.name AS 'Genre', ROUND(AVG(film.length),2) AS 'Average Run Time'
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name;

-- Identify the film categories with the longest average running time.

-- This is a reason not to use quotation marks!!  When ordering, does not recognize quoted strings

SELECT category.name AS 'Genre', ROUND(AVG(film.length),2) AS 'Average Run Time'
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name
ORDER BY 'Average Run Time' DESC;
-- ORDER BY ROUND(AVG(film.length),2) DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT film.title, COUNT(rental.rental_id) AS times_rented
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id
ORDER BY times_rented DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT film.film_id, film.title, store.store_id, inventory.inventory_id
FROM inventory
JOIN store using (store_id)
JOIN film using (film_id)
WHERE title = 'Academy Dinosaur' AND store.store_id = 1;


-- 8.  List of ALL film titles and if they are available in inventory.
SELECT film.title, COUNT(inventory.film_id) AS 'Number of Copies',
CASE
WHEN ISNULL(inventory.film_id) then 'Not Available'
ELSE 'Available'
END AS rental_available
FROM film
LEFT JOIN inventory ON film.film_id = inventory.film_id
GROUP BY film.film_id
ORDER BY film.film_id ASC;
